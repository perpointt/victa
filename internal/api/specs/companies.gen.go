// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CompaniesServerInterface represents all server handlers.
type CompaniesServerInterface interface {
	// Получение списка компаний
	// (GET /companies)
	GetCompanies(c *gin.Context)
	// Создание компании
	// (POST /companies)
	CreateCompany(c *gin.Context)
	// Удаление компании
	// (DELETE /companies/{id})
	DeleteCompany(c *gin.Context, id string)
	// Получение компании по id
	// (GET /companies/{id})
	GetCompany(c *gin.Context, id string)
	// Обновление компании
	// (PUT /companies/{id})
	UpdateCompany(c *gin.Context, id string)
}

// CompaniesServerInterfaceWrapper converts contexts to parameters.
type CompaniesServerInterfaceWrapper struct {
	Handler            CompaniesServerInterface
	HandlerMiddlewares []CompaniesMiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type CompaniesMiddlewareFunc func(c *gin.Context)

// GetCompanies operation middleware
func (siw *CompaniesServerInterfaceWrapper) GetCompanies(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCompanies(c)
}

// CreateCompany operation middleware
func (siw *CompaniesServerInterfaceWrapper) CreateCompany(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCompany(c)
}

// DeleteCompany operation middleware
func (siw *CompaniesServerInterfaceWrapper) DeleteCompany(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCompany(c, id)
}

// GetCompany operation middleware
func (siw *CompaniesServerInterfaceWrapper) GetCompany(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCompany(c, id)
}

// UpdateCompany operation middleware
func (siw *CompaniesServerInterfaceWrapper) UpdateCompany(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCompany(c, id)
}

// CompaniesGinServerOptions provides options for the Gin server.
type CompaniesGinServerOptions struct {
	BaseURL      string
	Middlewares  []CompaniesMiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterCompaniesHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterCompaniesHandlers(router gin.IRouter, si CompaniesServerInterface) {
	RegisterCompaniesHandlersWithOptions(router, si, CompaniesGinServerOptions{})
}

// RegisterCompaniesHandlersWithOptions creates http.Handler with additional options
func RegisterCompaniesHandlersWithOptions(router gin.IRouter, si CompaniesServerInterface, options CompaniesGinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := CompaniesServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/companies", wrapper.GetCompanies)
	router.POST(options.BaseURL+"/companies", wrapper.CreateCompany)
	router.DELETE(options.BaseURL+"/companies/:id", wrapper.DeleteCompany)
	router.GET(options.BaseURL+"/companies/:id", wrapper.GetCompany)
	router.PUT(options.BaseURL+"/companies/:id", wrapper.UpdateCompany)
}
