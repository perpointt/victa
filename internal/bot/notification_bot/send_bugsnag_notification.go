package notification_bot

import (
	"fmt"
	"strings"
	"time"
	"victa/internal/domain"
)

func (bot *Bot) SendBugsnagNotification(w domain.BugsnagWebhook) {
	text := bot.buildErrorText(w)
	_ = bot.SendMessage(bot.NewHtmlMessage(bot.chatID, text))
}

func (bot *Bot) buildErrorText(w domain.BugsnagWebhook) string {
	var b strings.Builder
	b.Grow(512)

	projectName := bot.Escape(w.Project.Name)
	projectURL := bot.Escape(w.Project.URL)
	device := w.Error.Device
	app := w.Error.App

	b.WriteString(fmt.Sprintf("‚ö†Ô∏è <b><a href=\"%s\">%s</a> | %s</b>\n",
		projectURL, projectName, bot.buildErrorTitle(w)))

	meta := []string{
		fmt.Sprintf("\n<b>‚Ä¢ –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b> %s+%s", bot.Escape(app.Version), bot.Escape(app.VersionCode)),
		fmt.Sprintf("<b>‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> %s", bot.Escape(app.Type)),
		fmt.Sprintf("<b>‚Ä¢ –°—Ç–∞—Ç—É—Å:</b> %s", bot.Escape(bot.buildErrorStatus(w))),
		fmt.Sprintf("<b>‚Ä¢ –ü—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è:</b> %d", w.Error.Occurrences),
		fmt.Sprintf("<b>‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞:</b> %v", !w.Error.Unhandled),
		fmt.Sprintf("<b>‚Ä¢ User ID:</b> <code>%v</code>", w.Error.UserID),
	}

	for _, m := range meta {
		b.WriteString(m + "\n")
	}

	b.WriteString(fmt.Sprintf("\n<i>Ô∏è–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</i>\n<pre>%s</pre>",
		bot.Escape(w.Error.Message)))

	b.WriteString("\n\n<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:</i>\n<blockquote expandable>")

	deviceMeta := []string{
		fmt.Sprintf("<b>‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> %s %s", bot.Escape(device.Manufacturer), bot.Escape(device.Model)),
		fmt.Sprintf("<b>‚Ä¢ OS:</b> %s %s", bot.Escape(device.OSName), bot.Escape(device.OSVersion)),
		fmt.Sprintf("<b>‚Ä¢ Locale:</b> %s", bot.Escape(device.Locale)),
		fmt.Sprintf("<b>‚Ä¢ Orientation:</b> %s", bot.Escape(device.Orientation)),
		fmt.Sprintf("<b>‚Ä¢ Battery:</b> %.0f %% (Charging: %v)", device.BatteryLevel*100, device.Charging),
		fmt.Sprintf("<b>‚Ä¢ RAM:</b> %s —Å–≤–æ–±–æ–¥–Ω–æ –∏–∑ %s",
			bot.formatBytes(device.FreeMemory), bot.formatBytes(device.TotalMemory)),
		fmt.Sprintf("<b>‚Ä¢ Disk:</b> %s —Å–≤–æ–±–æ–¥–Ω–æ", bot.formatBytes(device.FreeDisk)),
		fmt.Sprintf("<b>‚Ä¢ Jailbreak:</b> %v", device.JailBroken),
		fmt.Sprintf("<b>‚Ä¢ –í—Ä–µ–º—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:</b> %s", device.Time.Format(time.RFC3339)),
	}

	for _, m := range deviceMeta {
		b.WriteString(m + "\n")
	}

	b.WriteString("</blockquote>")

	b.WriteString("\n\n<i>StackTrace:</i>\n<blockquote expandable>")

	for _, ex := range w.Error.Exceptions {
		if len(ex.StackTrace) == 0 {
			continue
		}

		for _, frame := range ex.StackTrace {
			b.WriteString(bot.Escape(
				fmt.Sprintf("%s:%s ‚Äî %s\n\n",
					frame.File,
					frame.LineNumber,
					frame.Method,
				)))
		}
	}

	b.WriteString("</blockquote>")

	b.WriteString(fmt.Sprintf("\n\nüîó <b><a href=\"%s\">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ</a></b>",
		bot.Escape(w.Error.URL)))

	return b.String()
}

func (bot *Bot) formatBytes(b int64) string {
	const unit = 1024
	if b < unit {
		return fmt.Sprintf("%d B", b)
	}
	div, exp := int64(unit), 0
	for n := b / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %ciB",
		float64(b)/float64(div), "KMGTPE"[exp])
}

func (bot *Bot) buildErrorTitle(w domain.BugsnagWebhook) string {
	switch w.Trigger.Type {
	case "firstException":
		return "–ù–æ–≤–∞—è –æ—à–∏–±–∫–∞"
	case "errorEventFrequency":
		return "–û—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —á–∞—Å—Ç–æ"
	case "reopened":
		return "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ—à–∏–±–∫–∏"
	case "projectSpiking":
		return "–í—Å–ø–ª–µ—Å–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ"
	case "errorStateManualChange":
		return "–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É—é"
	default:
		return w.Trigger.Type
	}
}

func (bot *Bot) buildErrorStatus(w domain.BugsnagWebhook) string {
	switch w.Error.Status {
	case "open":
		return "–û—Ç–∫—Ä—ã—Ç–∞"
	case "fixed":
		return "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞"
	case "snoozed":
		return "–û—Ç–ª–æ–∂–µ–Ω–∞"
	case "ignored":
		return "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞"
	default:
		return w.Error.Status
	}
}
